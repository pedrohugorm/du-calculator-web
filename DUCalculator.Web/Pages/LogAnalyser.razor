@page "/lua-log-analyser"
@using DUCalculator.Web.Domain.LogAnalyser
@inject IChannelOutputAnalyserService ChannelOutputAnalyserService
@inject IJSRuntime JS

<PageTitle>Lua Log Analyser</PageTitle>

@code {
    readonly Dictionary<string, ILuaLogEntry> _allEntries = new();
    string _text = "";
    
    LogAnalysisResult? _analysisResult;
    readonly Dictionary<long, string> _timestampResults = new();
    Dictionary<string, bool> _filters = new()
    {
        {"XS", true},
        {"S", true},
        {"M", true},
        {"L", true},
    };

    private async Task AnalyseLuaLog()
    {
        _analysisResult = ChannelOutputAnalyserService.Analyse(_text);
        
        foreach (var entry in _analysisResult.Entries)
        {
            _allEntries.TryAdd(entry.ToUniqueName(), entry);
            
            if (_timestampResults.ContainsKey(entry.Timestamp))
            {
                continue;
            }
            
            var result = await JS.InvokeAsync<string>("timestampToLocalDate", entry.Timestamp);

            _timestampResults.TryAdd(entry.Timestamp, result);
        }
    }

    private void Clear()
    {
        _allEntries.Clear();
    }

    private void ToggleFilter(string size)
    {
        if (!_filters.ContainsKey(size))
        {
            return;
        }
        
        _filters[size] = !_filters[size];
    }
    
    private void ResetSizeFilter()
    {
        foreach (var kvp in _filters)
        {
            _filters[kvp.Key] = true;
        }
    }

    private bool ApplyFilters(KeyValuePair<string, ILuaLogEntry> arg)
    {
        if (arg.Value is RadarContactLogEntry radarContact)
        {
            if (_filters.TryGetValue(radarContact.Construct.Size, out var active))
            {
                return active;
            }
        }

        return true;
    }

    private int CountBySize(string size)
    {
        return _allEntries.Count(x =>
        {
            if (x.Value is RadarContactLogEntry radarContact)
            {
                return radarContact.Construct.Size == size;
            }

            return false;
        });
    }

    private int CountHits() => _allEntries.Count(x => x.Value is HitEntry);
    private int CountMisses() => _allEntries.Count(x => x.Value is MissEntry);
    private int CountCombatEntries() => _allEntries.Count(x => x.Value is CombatLogEntry);
    private bool HasCombatEntries() => _allEntries.Any(x => x.Value is CombatLogEntry);
}

<div class="console-container">
    <div class="console-output">
        <div class="row">
            <div class="col">
                @if (_analysisResult != null)
                {
                    <div>@_analysisResult.Message</div>
                    foreach (var kvp in _allEntries
                        .OrderByDescending(x => x.Key)
                        .Where(ApplyFilters)
                    )
                    {
                        if (kvp.Value is RadarContactLogEntry radarContact)
                        {
                            <div class="entry">
                                <span class="date">@(_timestampResults.TryGetValue(radarContact.Timestamp, out var dateString) ? dateString : string.Empty)</span>
                                <span class="badge construct-@radarContact.Construct.Size.ToLower()">@radarContact.Construct.Size</span>
                                <span>@radarContact.Construct.Name&nbsp;</span>
                                <span class="position">@radarContact.Position</span>
                                <span class="tags">
                                    @foreach (var tag in radarContact.Construct.Tags)
                                    {
                                        <span class="badge">@tag</span>
                                    }
                                </span>
                            </div>
                        }
                        if (kvp.Value is HitEntry hit)
                        {
                            <div class="entry">
                                <span class="date">@(_timestampResults.TryGetValue(hit.Timestamp, out var dateString) ? dateString : string.Empty)</span>
                                <span>@hit.OriginName - @hit.WeaponName did <spawn class="badge badge-hit">@hit.Damage</spawn> damage to @hit.TargetName</span>
                            </div>
                        }
                        if (kvp.Value is MissEntry miss)
                        {
                            <div class="entry">
                                <span class="date">@(_timestampResults.TryGetValue(miss.Timestamp, out var dateString) ? dateString : string.Empty)</span>
                                <span>@miss.OriginName - @miss.WeaponName <span class="badge badge-miss">missed</span> @miss.TargetName</span>
                            </div>
                        }
                    }
                    
                    @if (HasCombatEntries())
                    {
                        <div>
                            <div>Hits: @CountHits()</div>
                            <div>Misses: @CountMisses()</div>
                            <div>Hit Ratio: @($"{(CountHits() / (float)CountCombatEntries()) * 100:F2}%")</div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="console-input">
        <form @onsubmit="AnalyseLuaLog">
            <div class="container">
                <div class="row">
                    <div class="col-md-4">
                        <textarea placeholder="Paste DU Lua Channel Log" @bind="_text" class="form-control"></textarea>
                    </div>
                    <div class="col-md-8">
                        <button type="submit" class="btn btn-primary">Analyse</button>
                        <button @onclick="Clear" type="button" class="btn btn-secondary">Clear</button>
                        <button @onclick="ResetSizeFilter" type="button" class="btn btn-dark" title="Clear Size Filter">ALL</button>
                        <button @onclick='() => ToggleFilter("XS")' type="button" class="btn btn-dark btn-active-@_filters["XS"]" title="Filter only XS Cores">XS (@CountBySize("XS"))</button>
                        <button @onclick='() => ToggleFilter("S")' type="button" class="btn btn-dark btn-active-@_filters["S"]" title="Filter only S Cores">S (@CountBySize("S"))</button>
                        <button @onclick='() => ToggleFilter("M")' type="button" class="btn btn-dark btn-active-@_filters["M"]" title="Filter only M Cores">M (@CountBySize("M"))</button>
                        <button @onclick='() => ToggleFilter("L")' type="button" class="btn btn-dark btn-active-@_filters["L"]" title="Filter only L Cores">L (@CountBySize("L"))</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>