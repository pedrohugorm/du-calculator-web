@page "/travel-router"
@using DUCalculator.Web.Domain.SpaceTravel
@using DUCalculator.Web.Domain.LiveTrace
@using System.Numerics
@using System.Text
@using DUCalculator.Web.Domain.HexGrid
@inject ITravelRouteService TravelRouteService
@inject IJSRuntime JS

@code {
    private string _positions = string.Empty;
    private string _beacons = string.Empty;
    private string _dedupePositions = string.Empty;
    private HashSet<Vector3> _deDupedPositionsParsed = new();

    private string? _startPos;
    private IEnumerable<ITravelRouteWaypoint> _waypoints = new List<ITravelRouteWaypoint>();
    
    private int _offsetX;
    private int _offsetY;
    private int _offsetZ;
    private int _offsetMultiplier = 1000;

    private readonly Dictionary<string, NamedPosition> _namedPositions = new();
    private readonly Dictionary<string, NamedPosition> _beaconPositions = new();
    private readonly Dictionary<string, bool> _copiedWaypoints = new();

    private void HandleSubmit()
    {
        var offsetVector = new Vector3(_offsetX, _offsetY, _offsetZ);
        
        if (string.IsNullOrEmpty(_startPos))
        {
            return;
        }
        
        if (!string.IsNullOrEmpty(_dedupePositions))
        {
            _deDupedPositionsParsed = PositionListParser.ParseText(_dedupePositions)
                .Select(x => x.Position)
                .ToHashSet();
        }

        if (!string.IsNullOrEmpty(_positions))
        {
            var positions = PositionListParser.ParseText(_positions)
                .Where(np => !_deDupedPositionsParsed.Contains(np.Position))
                .ToDictionary(k => k.Name, v => v);

            foreach (var kvp in positions)
            {
                _namedPositions.TryAdd(kvp.Key, kvp.Value);
            }
        }

        if (!string.IsNullOrEmpty(_beacons))
        {
            var positions = PositionListParser.ParseText(_beacons)
                .ToDictionary(k => k.Name, v => v);

            foreach (var kvp in positions)
            {
                _beaconPositions.TryAdd(kvp.Key, kvp.Value);
            }
        }

        _waypoints = TravelRouteService.SolveTravelPath(
            new NamedPosition("Start", _startPos.PositionToVector3()),
            _namedPositions.Values,
            _beaconPositions.Values
            ).ToList();
        
        foreach (var wp in _waypoints)
        {
            wp.AddOffset(offsetVector * _offsetMultiplier);
        }

        if (_reversed)
        {
            _waypoints = _waypoints.Reverse();
        }
    }

    private void Clear()
    {
        _namedPositions.Clear();
    }
    
    private void Copy(MouseEventArgs _, ITravelRouteWaypoint waypoint)
    {
        JS.InvokeVoidAsync("copyToClipboard", $"mark {waypoint.Position.Vector3ToPosition()} {waypoint.Name} 1");

        if (!_copiedWaypoints.TryAdd(waypoint.Name, true))
        {
            _copiedWaypoints.Remove(waypoint.Name);
        }
    }

    private void Remove(ITravelRouteWaypoint wp)
    {
        _namedPositions.Remove(wp.Name);
    }

    private void CopySaga()
    {
        var sb = new StringBuilder();
        sb.AppendLine($"local sagaDbValue = '{_waypoints.ToSagaDataBankString()}'");
        sb.AppendLine("db.setStringValue('SagaRoutes', sagaDbValue)");
        
        JS.InvokeVoidAsync("copyToClipboard", sb.ToString());
        
        _copiedWaypoints.TryAdd("saga", true);
    }
    
    private void CopyFox()
    {
        var foxString = _waypoints
            .Select(x => new Tuple<string, Vector3>(x.Name, x.Position))
            .ToFoxDataBankString();
        
        var sb = new StringBuilder();
        sb.AppendLine($"local foxDbValue = '{foxString}'");
        sb.AppendLine("db.setStringValue('savemarks', foxDbValue)");
        
        JS.InvokeVoidAsync("copyToClipboard", sb.ToString());
        
        _copiedWaypoints.TryAdd("fox", true);
    }

    private bool _reversed;
}

<PageTitle>Travel Router</PageTitle>

<div class="console-container">
    <div class="console-output">
        @if (_waypoints.Any())
        {
            <div class="row">
                <div class="col-2">
                    <button type="button" class="btn btn-dark" @onclick="CopyFox">Copy for Fox</button>
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-dark" @onclick="CopySaga">Copy for Saga</button>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                @foreach (var wp in _waypoints)
                {
                    <div>
                        <a @onclick="args => Copy(args, wp)" href="javascript:void(0)" title="click to copy @wp.Name" class="waypoint-position">@wp.Name @wp.Position.Vector3ToPosition()</a>
                        @if (_copiedWaypoints.ContainsKey(wp.Name))
                        {
                            <span class="copied-check">&#10003;</span>
                        }
                        @* <button @onclick="() => Remove(wp)" type="button" class="btn-sm btn-danger">X</button> *@
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="console-input">
        <form @onsubmit="HandleSubmit">
            <div class="container">
                <div class="row">
                    <div class="col-md-4">
                        <input type="text" placeholder="Start Position" @bind="_startPos" class="form-control"/>
                    </div>
                    <div class="col-md-4">
                        <textarea placeholder="Positions, Format: NAME POSITION separated by lines" @bind="_positions" class="form-control"></textarea>
                    </div>
                    <div class="col-md-4">
                        <textarea placeholder="Beacons, Format: NAME POSITION separated by lines" @bind="_beacons" class="form-control"></textarea>
                    </div>
                    <div class="col-12"><hr/></div>
                    <div class="col-md-4">
                        <textarea placeholder="Deduplicate From: NAME POSITION separated by lines" @bind="_dedupePositions" class="form-control"></textarea>
                    </div>
                    <div class="col-12"><hr/></div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary">Solve Path</button>
                        <button @onclick="Clear" type="button" class="btn btn-secondary">Clear</button>
                    </div>
                    <div class="col-1">
                        <label class="form-label">Offset (x1000)</label>
                    </div>
                    <div class="col-1">
                        <input type="number" placeholder="X" @bind="_offsetX" class="form-control"/>
                    </div>
                    <div class="col-1">
                        <input type="number" placeholder="Y" @bind="_offsetY" class="form-control"/>
                    </div>
                    <div class="col-1">
                        <input type="number" placeholder="Z" @bind="_offsetZ" class="form-control"/>
                    </div>
                    <div class="col-2">
                        <input type="checkbox" @bind="_reversed"/> Reversed
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>